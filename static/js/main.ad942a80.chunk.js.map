{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","className","key","icon","onClick","handleToggleDoneClick","type","id","style","isdone","textDecoration","value","text","onChange","e","setUpdate","target","deleteItem","duration","easing","library","add","faTrash","faCircle","faCheckCircle","App","state","currentItem","name","handleInput","bind","addItem","this","setState","Date","now","preventDefault","newItem","newItems","filteredItems","filter","onSubmit","placeholder","checkItem","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ad942a80.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ListItems.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport FlipMove from 'react-flip-move';\r\n\r\nfunction ListItems(props) {\r\n    const items = props.items;\r\n    const listItems = items.map(item => \r\n        {\r\n            return <div className=\"list\" key={item.key}>\r\n            <p>\r\n            <span>\r\n                <FontAwesomeIcon className=\"facircle far\" icon='check-circle'\r\n                onClick={ () => props.handleToggleDoneClick(item.key)}\r\n                />\r\n            </span>\r\n            <input \r\n            className=\"name\"\r\n            type=\"text\" \r\n            id={item.key} \r\n            style= {item.isdone ? {textDecoration: \"line-through\"} : {textDecoration: \"none\"}}\r\n            value = {item.text}\r\n            onChange = {\r\n                (e) => {\r\n                    props.setUpdate(e.target.value, item.key)\r\n                }\r\n            }\r\n            />\r\n            <span>\r\n                <FontAwesomeIcon className=\"fatrash\" icon='trash'\r\n                onClick={ () => props.deleteItem(item.key)}\r\n                />\r\n            </span>\r\n            </p>\r\n            </div>\r\n        })\r\n    return(\r\n        <div>\r\n            <FlipMove duration={300} easing=\"ease-in-out\">\r\n            {listItems}\r\n            </FlipMove>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default ListItems;","import React from 'react';\nimport './App.css';\nimport ListItems from './ListItems.js';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\nimport { faCircle } from '@fortawesome/free-solid-svg-icons';\nimport { faCheckCircle } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faTrash, faCircle, faCheckCircle);\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state={\n      items:[],\n      currentItem:{\n        text:'',\n        key:'',\n        isdone: false,\n        name:''\n      }    \n    }\n    this.handleInput = this.handleInput.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.handleToggleDoneClick = this.handleToggleDoneClick.bind(this);\n    this.setUpdate = this.setUpdate.bind(this);\n  }\n\n  handleInput(e) {\n    this.setState({\n      currentItem:{\n        text: e.target.value,\n        key:Date.now()\n      }\n    })\n  }\n  addItem(e){\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    if(newItem.text !== \"\") {\n      const newItems=[...this.state.items, newItem];\n      this.setState({\n        items:newItems,\n        currentItem:{\n          text:'',\n          key:'',\n          isdone: false\n        }\n      })\n    }\n  }\n  deleteItem(key) {\n    const filteredItems = this.state.items.filter(item => \n      item.key!==key);\n      this.setState({\n        items:filteredItems\n      })\n  }\n\n  handleToggleDoneClick(key) {\n    const items = this.state.items;\n    items.map(item => {\n      if(item.key === key) {\n        item.isdone = !item.isdone\n      }\n      return item;\n    })\n    this.setState({items: items});\n  }\n\n  setUpdate(text, key) {\n    const items = this.state.items;\n    items.map(item => {\n      if(item.key===key) {\n        item.text=text;\n      }\n    })\n    this.setState({\n      items: items\n    })\n  }\n  render(){\n    return (\n      <div className=\"App\">\n        <header>\n          <h1 className=\"main-header\">My todo list:</h1>\n          <form id=\"to-do-form\" onSubmit={this.addItem}>\n              <input type=\"text\" placeholder=\"I need to do...\"\n              value={this.state.currentItem.text}\n              onChange={this.handleInput}/>\n              <button type=\"submit\">Add</button>\n          </form>\n        </header>\n        <div className=\"borderDiv\"></div>\n        <ListItems items = {this.state.items} \n        deleteItem = {this.deleteItem} \n        checkItem = {this.checkItem}\n        setUpdate = {this.setUpdate}\n        handleToggleDoneClick={this.handleToggleDoneClick}\n        ></ListItems>\n        <div className=\"hidden-div\"></div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}